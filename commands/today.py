from aiogram import types, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from API.moex import get_moex_stock_history
from functions.plot import plot_moex_history_today
from _tickers import POPULAR_TICKERS


def register_today(dp: Dispatcher):
    @dp.message(Command("today"))
    async def today_handler(message: Message):
        args = message.text.split()

        if len(args) > 1:
            ticker = args[1].upper()
            await process_today(message, ticker)
        else:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=ticker, callback_data=f"today_{ticker}")] for ticker in POPULAR_TICKERS
                ]
            )
            await message.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ—ë —Ç–∏–∫–µ—Ä:", reply_markup=keyboard)

    @dp.callback_query(lambda c: c.data.startswith("today_"))
    async def handle_today_selection(callback: CallbackQuery):
        ticker = callback.data.split("_")[1]
        await callback.message.edit_text(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è {ticker}...")

        await process_today(callback.message, ticker)
        await callback.answer()

async def process_today(message: Message, ticker: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–∏–∫–µ—Ä: —Å—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è."""
    photo = plot_moex_history_today(ticker)

    if photo:
        caption = f"üìä –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω –∞–∫—Ü–∏–∏ <b>{ticker}</b> –∑–∞ —Å–µ–≥–æ–¥–Ω—è"
        await message.answer_photo(photo=photo, caption=caption, parse_mode="HTML")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", parse_mode="HTML")
