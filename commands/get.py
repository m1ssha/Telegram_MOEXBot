from aiogram import types, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from API.moex import get_moex_lastprice
from functions.plot import plot_moex_history
from commands._tickers import POPULAR_TICKERS

PERIODS = {
    "3 –¥–Ω—è": 3,
    "–ù–µ–¥–µ–ª—è": 7,
    "2 –Ω–µ–¥–µ–ª–∏": 14,
    "–ú–µ—Å—è—Ü": 30,
    "–ü–æ–ª–≥–æ–¥–∞": 182,
    "–ì–æ–¥": 365,
    "2 –≥–æ–¥–∞": 730,
    "5 –ª–µ—Ç": 1825
}

user_messages = {}


def register_get(dp: Dispatcher):
    @dp.message(Command("get"))
    async def getmoex_handler(message: Message):
        args = message.text.split()
        
        if len(args) > 1:
            ticker = args[1].upper()
            await ask_period(message, ticker, delete_message=False)
        else:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=ticker, callback_data=f"get_{ticker}")] for ticker in POPULAR_TICKERS
                ]
            )
            msg = await message.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ—ë —Ç–∏–∫–µ—Ä:", reply_markup=keyboard)

            user_messages[message.chat.id] = msg.message_id  

    @dp.callback_query(lambda c: c.data.startswith("get_"))
    async def handle_ticker_selection(callback: CallbackQuery):
        ticker = callback.data.split("_")[1]

        if callback.message.chat.id in user_messages:
            try:
                await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=user_messages[callback.message.chat.id])
                del user_messages[callback.message.chat.id]
            except Exception:
                pass

        await ask_period(callback.message, ticker)
        await callback.answer()

    @dp.callback_query(lambda c: c.data.startswith("period_"))
    async def handle_period_selection(callback: CallbackQuery):
        _, ticker, days = callback.data.split("_")
        days = int(days)

        await callback.message.edit_text(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≥—Ä–∞—Ñ–∏–∫ {ticker} –∑–∞ {days} –¥–Ω–µ–π...")
        await process_ticker(callback.message, ticker, days)
        await callback.answer()


async def ask_period(message: Message, ticker: str, delete_message=True):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–∏–æ–¥–∞."""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=period, callback_data=f"period_{ticker}_{days}")] for period, days in PERIODS.items()
        ]
    )

    await message.answer(f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è {ticker}:", reply_markup=keyboard)


async def process_ticker(message: Message, ticker: str, days: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–∏–∫–µ—Ä: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
    photo = plot_moex_history(ticker, days)

    if photo:
        caption = f"üìä –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω <b>{ticker}</b> –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π"
        await message.answer_photo(photo=photo, caption=caption, parse_mode="HTML")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", parse_mode="HTML")
